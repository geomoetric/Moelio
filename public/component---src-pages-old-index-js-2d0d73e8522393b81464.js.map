{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/components/layout.js","webpack:///./src/pages/old-index.js"],"names":["Bio","useStaticQuery","site","siteMetadata","author","social","style","display","name","summary","href","twitter","Layout","header","location","title","children","pathname","marginTop","boxShadow","color","to","fontFamily","marginLeft","marginRight","Date","getFullYear","BlogIndex","data","siteTitle","posts","allMarkdownRemark","edges","map","node","frontmatter","fields","slug","key","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","pageQuery"],"mappings":"6FAAA,qCAgDeA,IApCH,WACV,IADgB,EACHC,YAAe,cAgBIC,KAAKC,aAA7BC,EAjBQ,EAiBRA,OAAQC,EAjBA,EAiBAA,OAChB,OACE,yBACEC,MAAO,CACLC,QAAQ,SAIV,yCACa,gCAASH,EAAOI,MAD7B,IAC6CJ,EAAOK,QADpD,IAGE,uBAAGC,KAAI,uBAAyBL,EAAOM,SAAvC,wC,kCCxCR,qCAqEeC,IAhEA,SAAC,GAAmC,IAE7CC,EAFYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SA4CjC,OAvCEH,EAJY,MAGVC,EAASG,SAET,wBACEX,MAAO,CAGLY,UAAW,IAGb,kBAAC,IAAD,CACEZ,MAAO,CACLa,UAAU,OACVC,MAAM,WAERC,GAAE,KAEDN,IAML,wBACET,MAAO,CACLgB,WAAW,yBACXJ,UAAW,IAGb,kBAAC,IAAD,CACEZ,MAAO,CACLa,UAAU,OACVC,MAAM,WAERC,GAAE,KAEDN,IAMP,yBACET,MAAO,CACLiB,WAAW,OACXC,YAAY,SAKd,gCAASX,GACT,8BAAOG,GACP,sCACK,IAAIS,MAAOC,cADhB,mBAGE,uBAAGhB,KAAK,4BAAR,c,kCC/DR,0HAuDeiB,UA/CG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMd,EAAe,EAAfA,SACnBe,EAAYD,EAAK1B,KAAKC,aAAaY,MACnCe,EAAQF,EAAKG,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQlB,SAAUA,EAAUC,MAAOc,GACjC,kBAAC,IAAD,CAAKd,MAAM,cACX,kBAAC,IAAD,MACCe,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACNnB,EAAQmB,EAAKC,YAAYpB,OAASmB,EAAKE,OAAOC,KACpD,OACE,6BACEC,IAAKJ,EAAKE,OAAOC,KACjBE,WAAS,EACTC,SAAS,6BAET,gCACE,wBACElC,MAAO,IAIP,kBAAC,IAAD,CACEA,MAAO,CAAEa,UAAW,QACpBE,GAAIa,EAAKE,OAAOC,KAChBI,SAAS,OAET,0BAAMA,SAAS,YAAY1B,KAG/B,+BAAQmB,EAAKC,YAAYO,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQV,EAAKC,YAAYU,aAAeX,EAAKY,SAE/CL,SAAS,uBAYlB,IAAMM,EAAS","file":"component---src-pages-old-index-js-2d0d73e8522393b81464.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\n// import { rhythm } from \"../utils/typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  const { author, social } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        // marginBottom: rhythm(2.5),\n      }}\n    >\n      <p>\n        Written by <strong>{author.name}</strong> {author.summary}\n        {` `}\n        <a href={`https://twitter.com/${social.twitter}`}>\n          You should follow him on Twitter\n        </a>\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\n// import { rhythm, scale } from \"../utils/typography\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  let header\n\n  if (location.pathname === rootPath) {\n    header = (\n      <h1\n        style={{\n          // ...scale(1.5),\n          // marginBottom: rhythm(1.5),\n          marginTop: 0,\n        }}\n      >\n        <Link\n          style={{\n            boxShadow: `none`,\n            color: `inherit`,\n          }}\n          to={`/`}\n        >\n          {title}\n        </Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <h3\n        style={{\n          fontFamily: `Montserrat, sans-serif`,\n          marginTop: 0,\n        }}\n      >\n        <Link\n          style={{\n            boxShadow: `none`,\n            color: `inherit`,\n          }}\n          to={`/`}\n        >\n          {title}\n        </Link>\n      </h3>\n    )\n  }\n  return (\n    <div\n      style={{\n        marginLeft: `auto`,\n        marginRight: `auto`,\n        // maxWidth: rhythm(24),\n        // padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n      }}\n    >\n      <header>{header}</header>\n      <main>{children}</main>\n      <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.org\">Gatsby</a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import React from 'react';\nimport { Link, graphql } from 'gatsby';\n\nimport Bio from '../components/bio';\nimport Layout from '../components/layout';\nimport SEO from '../components/seo';\n// import { rhythm } from '../utils/typography';\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges;\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug;\n        return (\n          <article\n            key={node.fields.slug}\n            itemScope\n            itemType=\"http://schema.org/Article\"\n          >\n            <header>\n              <h3\n                style={{\n                  // marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link\n                  style={{ boxShadow: 'none' }}\n                  to={node.fields.slug}\n                  itemProp=\"url\"\n                >\n                  <span itemProp=\"headline\">{title}</span>\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n                itemProp=\"description\"\n              />\n            </section>\n          </article>\n        );\n      })}\n    </Layout>\n  );\n};\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}